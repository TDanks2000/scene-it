// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String             @id @default(cuid())
  name          String?
  email         String?            @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  reviews       Review[]
  mediaList     MediaWatchStatus[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Review {
  id        Int     @id @unique @default(autoincrement())
  userId    String
  review    String?
  rating    Int
  mediaType String // TV, Movie, Anime
  mediaId   String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MediaWatchStatus {
  id              Int      @id @default(autoincrement())
  userId          String
  mediaType       String // TV, Movie, Anime
  mediaId         String
  posterImage     String // HD poster image of the media
  bannerImage     String? // HD banner image of the media
  status          String // Watching, Plan to watch, Finished, Re-Watching, Paused, Dropped
  episodeProgress Int // e.g. 2/25 watched 2 out of 25 episodes. 1/1 or 0/1 if a movie
  episodesTotal   Int // The total number of episodes in the series. 1 if a movie
  startDate       DateTime @default(now())
  endDate         DateTime @updatedAt
  totalRewatches  Int
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Future: store media in db
